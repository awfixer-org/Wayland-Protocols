<?xml version="1.0" encoding="UTF-8"?>
<protocol name="xdg_decoration_unstable_v1">
  <copyright>
    Copyright Â© 2018 Simon Ser

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
  </copyright>

  <interface name="zxdg_decoration_manager_v1" version="2">
    <description summary="window decoration manager">
      This interface allows a compositor to announce support for server-side
      decorations.

      A window decoration is a set of window controls as deemed appropriate by
      the party managing them, such as user interface components used to move,
      resize and change a window's state.

      A client can use this protocol to request being decorated by a supporting
      compositor. Starting in version 2, a client can also use this protocol to
      discover if the compositor is unconditionally drawing server-side
      decorations.

      If compositor and client do not negotiate the use of a server-side
      decoration using this protocol, clients continue to self-decorate as they
      see fit.

      Warning! The protocol described in this file is experimental and
      backward incompatible changes may be made. Backward compatible changes
      may be added together with the corresponding interface version bump.
      Backward incompatible changes are done by bumping the version number in
      the protocol and interface names and resetting the interface version.
      Once the protocol is to be declared stable, the 'z' prefix and the
      version number in the protocol and interface names are removed and the
      interface version number is reset.
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the decoration manager object">
        Destroy the decoration manager. This doesn't destroy objects created
        with the manager.
      </description>
    </request>

    <request name="get_toplevel_decoration">
      <description summary="create a new toplevel decoration object">
        Create a new decoration object associated with the given toplevel.

        Creating an xdg_toplevel_decoration from an xdg_toplevel which has a
        buffer attached or committed results in a buffer_already_attached error.
        Attempts by a client to attach or manipulate a buffer prior to the first
        xdg_toplevel_decoration.configure event results in a unconfigured_buffer
        error.

        Starting with version 2, this request is guaranteed to have no
        side-effects other than creating the toplevel decoration object.
        In particular, the compositor must not change the decoration state
        as a result of this request.
      </description>
      <arg name="id" type="new_id" interface="zxdg_toplevel_decoration_v1"/>
      <arg name="toplevel" type="object" interface="xdg_toplevel"/>
    </request>
  </interface>

  <interface name="zxdg_toplevel_decoration_v1" version="1">
    <description summary="decoration object for a toplevel surface">
      The decoration object allows the compositor to toggle server-side window
      decorations for a toplevel surface. The client can request to switch to
      another mode.

      The xdg_toplevel_decoration object must be destroyed before its
      xdg_toplevel.
    </description>

    <enum name="error">
      <entry name="unconfigured_buffer" value="0"
        summary="xdg_toplevel has a buffer attached before configure"/>
      <entry name="already_constructed" value="1"
        summary="xdg_toplevel already has a decoration object"/>
      <entry name="orphaned" value="2"
        summary="xdg_toplevel destroyed before the decoration object"/>
      <entry name="invalid_mode" value="3"
        summary="invalid mode in set_mode" since="2"/>
      <entry name="buffer_already_attached" value="4"
        summary="Buffer already attached or committed" since="2"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the decoration object">
        Switch back to a mode without any server-side decorations at the next
        commit.
      </description>
    </request>

    <enum name="mode">
      <description summary="window decoration modes">
        These values describe window decoration modes.
      </description>
      <entry name="client_side" value="1"
        summary="no server-side window decoration"/>
      <entry name="server_side" value="2"
        summary="server-side window decoration"/>
      <entry name="server_side_mandatory" value="3"
        summary="server-side window decorations always drawn" since="2">
        <description>
          Server-side decorations are always drawn, and calls to set_mode
          will not change the decoration mode.

          Servers should only choose this mode if duplicate decorations (due
          to clients also drawing window decorations) is preferable to server-side
          window decorations not being drawn. There are a few reasons this may be
          the case:

          - 3D compositors place window controls on the bottom (to make them easier
            to reach) and use an exposure system to make misclicks less likely.
            Furthermore, shadows interfere with the user's depth perception, which
            is bad for user experience.

          - Secure systems such as Qubes OS may use window borders as indicators
            of trust. In these systems, not drawing these borders is a security
            vulnerability and therefore cannot be allowed.

          - Tiling compositors always draw a border between tiles to indicate the
            boundary between windows.

          - The user or system administrator may have explicitly requested that
            this mode be used via non-default configuration.
        </description>
      </entry>
    </enum>

    <request name="set_mode">
      <description summary="set the decoration mode">
        Set the toplevel surface decoration mode. If not sent in response to a
        configure event with mode set to "server_side_mandatory", this informs
        the compositor that the client prefers the provided decoration mode.
        If sent after a configure event with mode set to "server_side_mandatory",
        this informs the compositor that the client knows that server-side window
        decorations are being drawn and has adjusted its drawing accordingly.
        In this case, the provided decoration mode indicates whether the client
        is still drawing window controls or not.

        After requesting a decoration mode, the compositor will respond by
        emitting an xdg_surface.configure event. The client should then update
        its content, drawing it without decorations if the received mode is
        server-side decorations. The client must also acknowledge the configure
        when committing the new content (see xdg_surface.ack_configure).

        The compositor can decide not to use the client's mode and enforce a
        different mode instead.

        Clients whose decoration mode depend on the xdg_toplevel state may send
        a set_mode request in response to an xdg_surface.configure event and wait
        for the next xdg_surface.configure event to prevent unwanted state.
        Such clients are responsible for preventing configure loops and must
        make sure not to send multiple successive set_mode requests with the
        same decoration mode.

        In version 2 or higher, using the server_side_mandatory value in this
        request results in an invalid_mode error.
      </description>
      <arg name="mode" type="uint" enum="mode" summary="the decoration mode"/>
    </request>

    <request name="unset_mode">
      <description summary="unset the decoration mode">
        Unset the toplevel surface decoration mode. This informs the compositor
        that the client doesn't prefer a particular decoration mode.

        This request has the same semantics as set_mode.
      </description>
    </request>

    <event name="configure">
      <description summary="notify a decoration mode change">
        The configure event configures the effective decoration mode. The
        configured state should not be applied immediately. Clients must send an
        ack_configure in response to this event. See xdg_surface.configure and
        xdg_surface.ack_configure for details.

        A configure event can be sent at any time. The specified mode must be
        obeyed by the client.

        Starting in version 2, the compositor must send a configure event
        immediately when a decoration object is created. This event
        must reflect the state that existed prior to the decoration object
        being created. This allows clients to be informed of whether server-side
        decorations are being drawn without any unwanted side-effects.
      </description>
      <arg name="mode" type="uint" enum="mode" summary="the decoration mode"/>
    </event>
  </interface>
</protocol>
